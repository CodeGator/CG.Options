{
  "api/CG.Options.Extensions.html": {
    "href": "api/CG.Options.Extensions.html",
    "title": "Namespace CG.Options.Extensions",
    "keywords": "Namespace CG.Options.Extensions Classes ServiceCollectionExtensions This class contains extension methods related to the Microsoft.Extensions.DependencyInjection.IServiceCollection type."
  },
  "api/CG.Options.Extensions.ServiceCollectionExtensions.html": {
    "href": "api/CG.Options.Extensions.ServiceCollectionExtensions.html",
    "title": "Class ServiceCollectionExtensions",
    "keywords": "Class ServiceCollectionExtensions This class contains extension methods related to the Microsoft.Extensions.DependencyInjection.IServiceCollection type. Inheritance System.Object ServiceCollectionExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Options.Extensions Assembly : CG.Options.dll Syntax public static class ServiceCollectionExtensions Methods ConfigureOptions<TOptions>(IServiceCollection, TOptions) This method configures the specified TOptions object as a singleton service. Declaration public static IServiceCollection ConfigureOptions<TOptions>(this IServiceCollection serviceCollection, TOptions options) where TOptions : class, new() Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection The service collection to use for the operation. TOptions options The options to use for the operation. Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection The value of the serviceCollection parameter, for chaining calls together. Type Parameters Name Description TOptions The type of associated options. Remarks In this method, the options are verified (if the TOptions type derives from OptionsBase ), and then registered with serviceCollection as a singleton service. Exceptions Type Condition System.ArgumentException This exception is thrown whenever one or more of the required parameters is missing or invalid. System.ComponentModel.DataAnnotations.ValidationException This exception is thrown whenever the TOptions object fails to validate properly after the bind operation. ConfigureOptions<TOptions>(IServiceCollection, IConfiguration) This method configures the specified TOptions object as a singleton service. Declaration public static IServiceCollection ConfigureOptions<TOptions>(this IServiceCollection serviceCollection, IConfiguration configuration) where TOptions : class, new() Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection The service collection to use for the operation. Microsoft.Extensions.Configuration.IConfiguration configuration The configuration to use for the operation. Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection The value of the serviceCollection parameter, for chaining calls together. Type Parameters Name Description TOptions The type of associated options. Remarks In this method, the options are read from the configuration, bound to an instance of TOptions , verified (if the TOptions type derives from OptionsBase ), and finally registered with serviceCollection as a singleton service. Exceptions Type Condition System.ArgumentException This exception is thrown whenever one or more of the required parameters is missing or invalid. System.ComponentModel.DataAnnotations.ValidationException This exception is thrown whenever the TOptions object fails to validate properly after the bind operation. OptionsException This exception is thrown whenever the method encounters a configuration with no settings. ConfigureOptions<TOptions>(IServiceCollection, IConfiguration, out TOptions) This method configures the specified TOptions object as a singleton service. parameter. Declaration public static IServiceCollection ConfigureOptions<TOptions>(this IServiceCollection serviceCollection, IConfiguration configuration, out TOptions options) where TOptions : class, new() Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection The service collection to use for the operation. Microsoft.Extensions.Configuration.IConfiguration configuration The configuration to use for the operation. TOptions options The bound and validated options instance. Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection The value of the serviceCollection parameter, for chaining calls together. Type Parameters Name Description TOptions The type of associated options. Remarks In this method, the options are read from the configuration, bound to an instance of TOptions , verified (if the TOptions type derives from OptionsBase ), and finally registered with serviceCollection as a singleton service, using TOptions as the service type. The unadorned option instance is returned using the options parameter - for scenarios where options need to be configured and then immediately used for other configuration purposes. Exceptions Type Condition System.ArgumentException This exception is thrown whenever one or more of the required parameters is missing or invalid. System.ComponentModel.DataAnnotations.ValidationException This exception is thrown whenever the TOptions object fails to validate properly after the bind operation. OptionsException This exception is thrown whenever the method encounters a configuration with no settings. ConfigureOptions<TOptions, TImplementation>(IServiceCollection, IConfiguration) This method configures the specified TOptions object as a singleton service. Declaration public static IServiceCollection ConfigureOptions<TOptions, TImplementation>(this IServiceCollection serviceCollection, IConfiguration configuration) where TOptions : class where TImplementation : class, TOptions, new() Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection The service collection to use for the operation. Microsoft.Extensions.Configuration.IConfiguration configuration The configuration to use for the operation. Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection The value of the serviceCollection parameter, for chaining calls together. Type Parameters Name Description TOptions The type of associated options. TImplementation The type of associated options interface. Remarks In this method, the options are read from the configuration, bound to an instance of TImplementation , verified (if the TImplementation type derives from OptionsBase ), and finally registered with serviceCollection as a singleton service, using TOptions as the service type. Exceptions Type Condition System.ArgumentException This exception is thrown whenever one or more of the required parameters is missing or invalid. System.ComponentModel.DataAnnotations.ValidationException This exception is thrown whenever the TOptions object fails to validate properly after the bind operation. OptionsException This exception is thrown whenever the method encounters a configuration with no settings. ConfigureOptions<TOptions, TImplementation>(IServiceCollection, IConfiguration, out TOptions) This method configures the specified TOptions object as a singleton service. parameter. Declaration public static IServiceCollection ConfigureOptions<TOptions, TImplementation>(this IServiceCollection serviceCollection, IConfiguration configuration, out TOptions options) where TOptions : class where TImplementation : class, TOptions, new() Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection The service collection to use for the operation. Microsoft.Extensions.Configuration.IConfiguration configuration The configuration to use for the operation. TOptions options The bound and validated options instance. Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection The value of the serviceCollection parameter, for chaining calls together. Type Parameters Name Description TOptions The type of associated options. TImplementation The type of associated options interface. Remarks In this method, the options are read from the configuration, bound to an instance of TImplementation , verified (if the TImplementation type derives from OptionsBase ), and finally registered with serviceCollection as a singleton service, using TOptions as the service type. The unadorned option instance is returned using the options parameter - for scenarios where options need to be configured and then immediately used for other configuration purposes. Exceptions Type Condition System.ArgumentException This exception is thrown whenever one or more of the required parameters is missing or invalid. System.ComponentModel.DataAnnotations.ValidationException This exception is thrown whenever the TOptions object fails to validate properly after the bind operation. OptionsException This exception is thrown whenever the method encounters a configuration with no settings. TryConfigureOptions<TOptions>(IServiceCollection, TOptions) This method attempts to configure the specified TOptions object as a singleton service. Declaration public static bool TryConfigureOptions<TOptions>(this IServiceCollection serviceCollection, TOptions options) where TOptions : class, new() Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection The service collection to use for the operation. TOptions options The options to use for the operation. Returns Type Description System.Boolean True if the options were configured; false otherwise. Type Parameters Name Description TOptions The type of associated options. Remarks In this method, the options are verified (if the TOptions type derives from OptionsBase ), and then registered with serviceCollection as a singleton service. Exceptions Type Condition System.ArgumentException This exception is thrown whenever one or more of the required parameters is missing or invalid. TryConfigureOptions<TOptions>(IServiceCollection, IConfiguration) This method attempts to configure the specified TOptions object as a singleton service. Declaration public static bool TryConfigureOptions<TOptions>(this IServiceCollection serviceCollection, IConfiguration configuration) where TOptions : class, new() Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection The service collection to use for the operation. Microsoft.Extensions.Configuration.IConfiguration configuration The configuration to use for the operation. Returns Type Description System.Boolean True if the options were configured; false otherwise. Type Parameters Name Description TOptions The type of associated options. Remarks In this method, the options are read from the configuration, bound to an instance of TOptions , verified (if the TOptions type derives from OptionsBase ), and finally registered with serviceCollection as a singleton service. Exceptions Type Condition System.ArgumentException This exception is thrown whenever one or more of the required parameters is missing or invalid. TryConfigureOptions<TOptions>(IServiceCollection, IConfiguration, out TOptions) This method attempts to configure the specified TOptions object as a singleton service. Declaration public static bool TryConfigureOptions<TOptions>(this IServiceCollection serviceCollection, IConfiguration configuration, out TOptions options) where TOptions : class, new() Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection The service collection to use for the operation. Microsoft.Extensions.Configuration.IConfiguration configuration The configuration to use for the operation. TOptions options The options that were created by the operation. Returns Type Description System.Boolean True if the options were configured; false otherwise. Type Parameters Name Description TOptions The type of associated options. Remarks In this method, the options are read from the configuration, bound to an instance of TOptions , verified (if the TOptions type derives from OptionsBase ), and finally registered with serviceCollection as a singleton service. The unadorned option instance is returned using the options parameter - for scenarios where options need to be configured and then immediately used for other configuration purposes. Exceptions Type Condition System.ArgumentException This exception is thrown whenever one or more of the required parameters is missing or invalid. TryConfigureOptions<TOptions, TImplementation>(IServiceCollection, TImplementation) This method attempts to configure the specified TOptions object as a singleton service. Declaration public static bool TryConfigureOptions<TOptions, TImplementation>(this IServiceCollection serviceCollection, TImplementation options) where TOptions : class where TImplementation : class, TOptions, new() Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection The service collection to use for the operation. TImplementation options The options to use for the operation. Returns Type Description System.Boolean True if the options were configured; false otherwise. Type Parameters Name Description TOptions The type of associated options. TImplementation The type of associated options interface. Remarks In this method, the options are verified (if the TOptions type derives from OptionsBase ), and then registered with serviceCollection as a singleton service. Exceptions Type Condition System.ArgumentException This exception is thrown whenever one or more of the required parameters is missing or invalid. TryConfigureOptions<TOptions, TImplementation>(IServiceCollection, IConfiguration) This method attempts to configure the specified TOptions object as a singleton service. Declaration public static bool TryConfigureOptions<TOptions, TImplementation>(this IServiceCollection serviceCollection, IConfiguration configuration) where TOptions : class where TImplementation : class, TOptions, new() Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection The service collection to use for the operation. Microsoft.Extensions.Configuration.IConfiguration configuration The configuration to use for the operation. Returns Type Description System.Boolean True if the options were configured; false otherwise. Type Parameters Name Description TOptions The type of associated options. TImplementation The type of associated options interface. Remarks In this method, the options are read from the configuration, bound to an instance of TImplementation , verified (if the TImplementation type derives from OptionsBase ), and finally registered with serviceCollection as a singleton service, using TOptions as the service type. Exceptions Type Condition System.ArgumentException This exception is thrown whenever one or more of the required parameters is missing or invalid. TryConfigureOptions<TOptions, TImplementation>(IServiceCollection, IConfiguration, out TImplementation) This method attempts to configure the specified TOptions object as a singleton service. Declaration public static bool TryConfigureOptions<TOptions, TImplementation>(this IServiceCollection serviceCollection, IConfiguration configuration, out TImplementation options) where TOptions : class where TImplementation : class, TOptions, new() Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection The service collection to use for the operation. Microsoft.Extensions.Configuration.IConfiguration configuration The configuration to use for the operation. TImplementation options The options that were created by the operation. Returns Type Description System.Boolean True if the options were configured; false otherwise. Type Parameters Name Description TOptions The type of associated options. TImplementation The type of associated options interface. Remarks In this method, the options are read from the configuration, bound to an instance of TImplementation , verified (if the TImplementation type derives from OptionsBase ), and finally registered with serviceCollection as a singleton service, using TOptions as the service type. The unadorned option instance is returned using the options parameter - for scenarios where options need to be configured and then immediately used for other configuration purposes. Exceptions Type Condition System.ArgumentException This exception is thrown whenever one or more of the required parameters is missing or invalid."
  },
  "api/CG.Options.html": {
    "href": "api/CG.Options.html",
    "title": "Namespace CG.Options",
    "keywords": "Namespace CG.Options Classes OptionsBase This class represents a validatable set of configuration settings. OptionsException This class represents an options related exception."
  },
  "api/CG.Options.OptionsBase.html": {
    "href": "api/CG.Options.OptionsBase.html",
    "title": "Class OptionsBase",
    "keywords": "Class OptionsBase This class represents a validatable set of configuration settings. Inheritance System.Object CG.DataAnnotations.ValidatableObject OptionsBase Implements System.ComponentModel.DataAnnotations.IValidatableObject Inherited Members CG.DataAnnotations.ValidatableObject.Validate(System.ComponentModel.DataAnnotations.ValidationContext) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Options Assembly : CG.Options.dll Syntax public abstract class OptionsBase : ValidatableObject, IValidatableObject Implements System.ComponentModel.DataAnnotations.IValidatableObject"
  },
  "api/CG.Options.OptionsException.html": {
    "href": "api/CG.Options.OptionsException.html",
    "title": "Class OptionsException",
    "keywords": "Class OptionsException This class represents an options related exception. Inheritance System.Object System.Exception OptionsException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : CG.Options Assembly : CG.Options.dll Syntax [Serializable] public class OptionsException : Exception, ISerializable Constructors OptionsException() This constructor creates a new instance of the OptionsException class. Declaration public OptionsException() OptionsException(SerializationInfo, StreamingContext) This constructor creates a new instance of the OptionsException class. Declaration public OptionsException(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info The serialization info to use for the exception. System.Runtime.Serialization.StreamingContext context The streaming context to use for the exception. OptionsException(String) This constructor creates a new instance of the OptionsException class. Declaration public OptionsException(string message) Parameters Type Name Description System.String message The message to use for the exception. OptionsException(String, Exception) This constructor creates a new instance of the OptionsException class. Declaration public OptionsException(string message, Exception innerException) Parameters Type Name Description System.String message The message to use for the exception. System.Exception innerException An optional inner exception reference. Implements System.Runtime.Serialization.ISerializable"
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Add your introductions here!",
    "keywords": "Add your introductions here!"
  },
  "index.html": {
    "href": "index.html",
    "title": "Introduction",
    "keywords": "Introduction CG.Options.dll contains extensions for application options that are used by other CodeGator packages."
  }
}