{
  "api/CG.Options.html": {
    "href": "api/CG.Options.html",
    "title": "Namespace CG.Options",
    "keywords": "Namespace CG.Options Classes OptionsBase This class represents a validatable set of configuration settings. OptionsException This class represents an options related exception. ProtectedPropertyAttribute This class represents an encrypted option property."
  },
  "api/CG.Options.OptionsBase.html": {
    "href": "api/CG.Options.OptionsBase.html",
    "title": "Class OptionsBase",
    "keywords": "Class OptionsBase This class represents a validatable set of configuration settings. Inheritance System.Object CG.DataAnnotations.ValidatableObject OptionsBase Implements System.ComponentModel.DataAnnotations.IValidatableObject Inherited Members CG.DataAnnotations.ValidatableObject.Validate(System.ComponentModel.DataAnnotations.ValidationContext) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Options Assembly : CG.Options.dll Syntax public abstract class OptionsBase : ValidatableObject, IValidatableObject Implements System.ComponentModel.DataAnnotations.IValidatableObject"
  },
  "api/CG.Options.OptionsException.html": {
    "href": "api/CG.Options.OptionsException.html",
    "title": "Class OptionsException",
    "keywords": "Class OptionsException This class represents an options related exception. Inheritance System.Object System.Exception OptionsException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : CG.Options Assembly : CG.Options.dll Syntax [Serializable] public class OptionsException : Exception, ISerializable Constructors OptionsException() This constructor creates a new instance of the OptionsException class. Declaration public OptionsException() OptionsException(SerializationInfo, StreamingContext) This constructor creates a new instance of the OptionsException class. Declaration public OptionsException(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info The serialization info to use for the exception. System.Runtime.Serialization.StreamingContext context The streaming context to use for the exception. OptionsException(String) This constructor creates a new instance of the OptionsException class. Declaration public OptionsException(string message) Parameters Type Name Description System.String message The message to use for the exception. OptionsException(String, Exception) This constructor creates a new instance of the OptionsException class. Declaration public OptionsException(string message, Exception innerException) Parameters Type Name Description System.String message The message to use for the exception. System.Exception innerException An optional inner exception reference. Implements System.Runtime.Serialization.ISerializable"
  },
  "api/CG.Options.ProtectedPropertyAttribute.html": {
    "href": "api/CG.Options.ProtectedPropertyAttribute.html",
    "title": "Class ProtectedPropertyAttribute",
    "keywords": "Class ProtectedPropertyAttribute This class represents an encrypted option property. Inheritance System.Object System.Attribute ProtectedPropertyAttribute Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Options Assembly : CG.Options.dll Syntax [AttributeUsage(AttributeTargets.Property, AllowMultiple = false)] public class ProtectedPropertyAttribute : Attribute Properties Entropy This property contains optional entropy bytes. Declaration public byte[] Entropy { get; set; } Property Value Type Description System.Byte []"
  },
  "api/Microsoft.Extensions.Configuration.ConfigurationExtensions.html": {
    "href": "api/Microsoft.Extensions.Configuration.ConfigurationExtensions.html",
    "title": "Class ConfigurationExtensions",
    "keywords": "Class ConfigurationExtensions This class contains extension methods related to the Microsoft.Extensions.Configuration.IConfiguration type. Inheritance System.Object ConfigurationExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.Extensions.Configuration Assembly : CG.Options.dll Syntax public static class ConfigurationExtensions Methods DecryptProperties(IConfiguration, Object, DataProtectionScope, Byte[]) This method decrypts the value of any properties on the specified options object that: (1) are decorated with a see cref=\"ProtectedPropertyAttribute\"/> attribute, and (2) are of type: string. Declaration public static IConfiguration DecryptProperties(this IConfiguration configuration, object options, DataProtectionScope dataProtectionScope = DataProtectionScope.LocalMachine, byte[] entropy = null) Parameters Type Name Description Microsoft.Extensions.Configuration.IConfiguration configuration The configuration object to use for the operation. System.Object options The options object to use for the operation. System.Security.Cryptography.DataProtectionScope dataProtectionScope The data protection scope for the operation. System.Byte [] entropy Optional entropy bytes to use for the operation. Returns Type Description Microsoft.Extensions.Configuration.IConfiguration A new instance of T if successful; default(T) otherwise. Remarks This method only works with public properties of type string that are decorated with the ProtectedPropertyAttribute attribute. The underlying configuration source(s) are not modified by this method. Only the data in the options instance is modified. Examples This example demostrates a typical use of the DecryptProperties(IConfiguration, Object, DataProtectionScope, Byte[]) method: public void ConfigureServices(IServiceCollection services) { var options = new MyOptions(); Configuration.Bind(options); Configuration.DecryptProperties{MyOptions}(options); // Decorated properties on MyOptions are now decrypted. } Exceptions Type Condition System.ArgumentException This exception is thrown whenever one or more of the required parameters is missing or invalid. System.InvalidOperationException This exception is thrown whenever the underlying cryptography operation fails, for any reason. EncryptProperties(IConfiguration, Object, DataProtectionScope, Byte[]) This method encrypts the value of any properties on the specified properties object that are: (1) decorated with a ProtectedPropertyAttribute attribute, and (2) are of type: string. Declaration public static IConfiguration EncryptProperties(this IConfiguration configuration, object options, DataProtectionScope dataProtectionScope = DataProtectionScope.LocalMachine, byte[] entropy = null) Parameters Type Name Description Microsoft.Extensions.Configuration.IConfiguration configuration The configuration object to use for the operation. System.Object options The options object to use for the operation. System.Security.Cryptography.DataProtectionScope dataProtectionScope The data protection scope for the operation. System.Byte [] entropy Optional entropy bytes to use for the operation. Returns Type Description Microsoft.Extensions.Configuration.IConfiguration The value of the configuration Remarks This method only works with public properties of type string that are decorated with the ProtectedPropertyAttribute attribute. The underlying configuration source(s) are not modified by this method. Only the data in the option instance is modified. Examples This example demostrates a typical use of the EncryptProperties(IConfiguration, Object, DataProtectionScope, Byte[]) method: public void ConfigureServices(IServiceCollection services) { var options = new MyOptions(); Configuration.Bind(options); Configuration.EncryptProperties(options); // Decorated properties on MyOptions are now encrypted. } Exceptions Type Condition System.ArgumentException This exception is thrown whenever one or more of the required parameters is missing or invalid. System.InvalidOperationException This exception is thrown whenever the underlying cryptography operation fails, for any reason."
  },
  "api/Microsoft.Extensions.Configuration.html": {
    "href": "api/Microsoft.Extensions.Configuration.html",
    "title": "Namespace Microsoft.Extensions.Configuration",
    "keywords": "Namespace Microsoft.Extensions.Configuration Classes ConfigurationExtensions This class contains extension methods related to the Microsoft.Extensions.Configuration.IConfiguration type."
  },
  "api/Microsoft.Extensions.DependencyInjection.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.html",
    "title": "Namespace Microsoft.Extensions.DependencyInjection",
    "keywords": "Namespace Microsoft.Extensions.DependencyInjection Classes ServiceCollectionExtensions This class contains extension methods related to the Microsoft.Extensions.DependencyInjection.IServiceCollection type."
  },
  "api/Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.html",
    "title": "Class ServiceCollectionExtensions",
    "keywords": "Class ServiceCollectionExtensions This class contains extension methods related to the Microsoft.Extensions.DependencyInjection.IServiceCollection type. Inheritance System.Object ServiceCollectionExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.Extensions.DependencyInjection Assembly : CG.Options.dll Syntax public static class ServiceCollectionExtensions Methods ConfigureOptions<TOptions>(IServiceCollection, IConfiguration) This method attempts to configure the specified options as a singleton service with the specified service collection. The options are validated and if the results are not valid it throws an exception. Declaration public static IServiceCollection ConfigureOptions<TOptions>(this IServiceCollection serviceCollection, IConfiguration configuration) where TOptions : class, new() Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection The service collection to use for the operation. Microsoft.Extensions.Configuration.IConfiguration configuration The configuration to use for the operation. Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection The value of the serviceCollection parameter, for chaining calls together. Type Parameters Name Description TOptions The type of associated options. Remarks In addition to registering the TOptions object as a service, this method also decrypts any properties on the TOptions object that are decorated with a ProtectedPropertyAttribute attribute. It also validates the TOptions object after the binding and decryption steps are performed. All of this means that after the call to ConfigureOptions<TOptions>(IServiceCollection, IConfiguration) is over, the DI container will contain a singleton TOptions instance whose properties are decrypted and validated. Examples This example demostrates a typical use of the ConfigureOptions<TOptions>(IServiceCollection, IConfiguration) method: public void ConfigureServices(IServiceCollection services) { services.Configure{MyOptions}(Configuration); } Exceptions Type Condition System.ArgumentException This exception is thrown whenever one or more of the required parameters is missing or invalid. System.ComponentModel.DataAnnotations.ValidationException This exception is thrown whenever the TOptions object fails to validate properly after the bind operation. OptionsException This exception is thrown whenever the method encounters a configuration with no settings. ConfigureOptions<TOptions>(IServiceCollection, IConfiguration, out TOptions) This method attempts to configure the specified options as a singleton service with the specified service collection. The options are validated and if the results are not valid it throws an exception. The validated options are returned in the options parameter. Declaration public static IServiceCollection ConfigureOptions<TOptions>(this IServiceCollection serviceCollection, IConfiguration configuration, out TOptions options) where TOptions : class, new() Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection The service collection to use for the operation. Microsoft.Extensions.Configuration.IConfiguration configuration The configuration to use for the operation. TOptions options The bound and validated options instance. Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection The value of the serviceCollection parameter, for chaining calls together. Type Parameters Name Description TOptions The type of associated options. Remarks In addition to registering the TOptions object as a service, this method also decrypts any properties on the TOptions object that are decorated with a ProtectedPropertyAttribute attribute. It also validates the TOptions object after the binding and decryption steps are performed. All of this means that after the call to ConfigureOptions<TOptions>(IServiceCollection, IConfiguration) is over, the DI container will contain a singleton TOptions instance whose properties are decrypted and validated. Examples This example demostrates a typical use of the ConfigureOptions<TOptions>(IServiceCollection, IConfiguration) method: public void ConfigureServices(IServiceCollection services) { services.Configure{MyOptions}(Configuration, out var options); } Exceptions Type Condition System.ArgumentException This exception is thrown whenever one or more of the required parameters is missing or invalid. System.ComponentModel.DataAnnotations.ValidationException This exception is thrown whenever the TOptions object fails to validate properly after the bind operation. OptionsException This exception is thrown whenever the method encounters a configuration with no settings. TryConfigureOptions<TOptions>(IServiceCollection, IConfiguration) This method attempts to configure the specified options as a singleton service. Declaration public static bool TryConfigureOptions<TOptions>(this IServiceCollection serviceCollection, IConfiguration configuration) where TOptions : class, new() Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection The service collection to use for the operation. Microsoft.Extensions.Configuration.IConfiguration configuration The configuration to use for the operation. Returns Type Description System.Boolean True if the options were configured; false otherwise. Type Parameters Name Description TOptions The type of associated options. Remarks In addition to registering the TOptions object as a service, this method also decrypts any properties on the TOptions object that are decorated with a ProtectedPropertyAttribute attribute. It also validates the TOptions object after the binding and decryption steps are performed. All of this means that after the call to TryConfigureOptions<TOptions>(IServiceCollection, IConfiguration) is over, the DI container will contain a singleton TOptions instance whose properties are decrypted and validated. Examples This example demostrates a typical use of the TryConfigureOptions<TOptions>(IServiceCollection, IConfiguration) method: public void ConfigureServices(IServiceCollection services) { services.TryConfigureOptions{MyOptions}(Configuration); } Exceptions Type Condition System.ArgumentException This exception is thrown whenever one or more of the required parameters is missing or invalid. TryConfigureOptions<TOptions>(IServiceCollection, IConfiguration, out TOptions) This method attempts to configure the specified options as a singleton service. Declaration public static bool TryConfigureOptions<TOptions>(this IServiceCollection serviceCollection, IConfiguration configuration, out TOptions options) where TOptions : class, new() Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection The service collection to use for the operation. Microsoft.Extensions.Configuration.IConfiguration configuration The configuration to use for the operation. TOptions options The options that were created by the operation. Returns Type Description System.Boolean True if the options were configured; false otherwise. Type Parameters Name Description TOptions The type of associated options. Remarks In addition to registering the TOptions object as a service, this method also decrypts any properties on the TOptions object that are decorated with a ProtectedPropertyAttribute attribute. It also validates the TOptions object after the binding and decryption steps are performed. All of this means that after the call to TryConfigureOptions<TOptions>(IServiceCollection, IConfiguration) is over, the DI container will contain a singleton TOptions instance whose properties are decrypted and validated. Examples This example demostrates a typical use of the TryConfigureOptions<TOptions>(IServiceCollection, IConfiguration) method: public void ConfigureServices(IServiceCollection services) { services.TryConfigureOptions{MyOptions}(Configuration, out var options); } Exceptions Type Condition System.ArgumentException This exception is thrown whenever one or more of the required parameters is missing or invalid."
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Add your introductions here!",
    "keywords": "Add your introductions here!"
  },
  "index.html": {
    "href": "index.html",
    "title": "Introduction",
    "keywords": "Introduction CG.Options.dll contains extensions for application options that are used by other CodeGator packages."
  }
}