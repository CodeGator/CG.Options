{
  "api/CG.Options.html": {
    "href": "api/CG.Options.html",
    "title": "Namespace CG.Options",
    "keywords": "Namespace CG.Options Classes OptionsBase This class represents a validatable set of configuration settings. OptionsException This class represents an options related exception."
  },
  "api/CG.Options.OptionsBase.html": {
    "href": "api/CG.Options.OptionsBase.html",
    "title": "Class OptionsBase",
    "keywords": "Class OptionsBase This class represents a validatable set of configuration settings. Inheritance System.Object OptionsBase Namespace : CG.Options Assembly : CG.Options.dll Syntax public abstract class OptionsBase : ValidatableObject"
  },
  "api/CG.Options.OptionsException.html": {
    "href": "api/CG.Options.OptionsException.html",
    "title": "Class OptionsException",
    "keywords": "Class OptionsException This class represents an options related exception. Inheritance System.Object OptionsException Namespace : CG.Options Assembly : CG.Options.dll Syntax public class OptionsException : Exception Constructors OptionsException() This constructor creates a new instance of the OptionsException class. Declaration public OptionsException() OptionsException(SerializationInfo, StreamingContext) This constructor creates a new instance of the OptionsException class. Declaration public OptionsException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The serialization info to use for the exception. StreamingContext context The streaming context to use for the exception. OptionsException(String) This constructor creates a new instance of the OptionsException class. Declaration public OptionsException(string message) Parameters Type Name Description System.String message The message to use for the exception. OptionsException(String, Exception) This constructor creates a new instance of the OptionsException class. Declaration public OptionsException(string message, Exception innerException) Parameters Type Name Description System.String message The message to use for the exception. Exception innerException An optional inner exception reference."
  },
  "api/CG.Validations.GuardExtensions.html": {
    "href": "api/CG.Validations.GuardExtensions.html",
    "title": "Class GuardExtensions",
    "keywords": "Class GuardExtensions This class contains extension methods related to the CG.Validations.IGuard type. Inheritance System.Object GuardExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Validations Assembly : CG.Options.dll Syntax public static class GuardExtensions Methods ThrowIfInvalid(IGuard, Object, String, String, String, Int32) This method throws an exception if the argValue argument has contains any properties that fail validation checks. Declaration public static void ThrowIfInvalid(this IGuard guard, object argValue, string argName, string memberName = \"\", string sourceFilePath = \"\", int sourceLineNumber = 0) Parameters Type Name Description CG.Validations.IGuard guard The guard instance to use for the operation. System.Object argValue The argument to test. System.String argName The name of the argument. System.String memberName Not used. Supplied by the compiler. System.String sourceFilePath Not used. Supplied by the compiler. System.Int32 sourceLineNumber Not used. Supplied by the compiler."
  },
  "api/CG.Validations.html": {
    "href": "api/CG.Validations.html",
    "title": "Namespace CG.Validations",
    "keywords": "Namespace CG.Validations Classes GuardExtensions This class contains extension methods related to the CG.Validations.IGuard type."
  },
  "api/Microsoft.Extensions.DependencyInjection.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.html",
    "title": "Namespace Microsoft.Extensions.DependencyInjection",
    "keywords": "Namespace Microsoft.Extensions.DependencyInjection Classes ServiceCollectionExtensions This class contains extension methods related to the Microsoft.Extensions.DependencyInjection.IServiceCollection type."
  },
  "api/Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.html",
    "title": "Class ServiceCollectionExtensions",
    "keywords": "Class ServiceCollectionExtensions This class contains extension methods related to the Microsoft.Extensions.DependencyInjection.IServiceCollection type. Inheritance System.Object ServiceCollectionExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.Extensions.DependencyInjection Assembly : CG.Options.dll Syntax public static class ServiceCollectionExtensions Methods ConfigureOptions<TOptions>(IServiceCollection, TOptions) This method configures the specified TOptions object as a singleton service. Declaration public static IServiceCollection ConfigureOptions<TOptions>(this IServiceCollection serviceCollection, TOptions options) where TOptions : class, new() Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection The service collection to use for the operation. TOptions options The options to use for the operation. Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection The value of the serviceCollection parameter, for chaining calls together. Type Parameters Name Description TOptions The type of associated options. Remarks In this method, the options are verified (if the TOptions type derives from ), and then registered with serviceCollection as a singleton service. ConfigureOptions<TOptions>(IServiceCollection, IConfiguration) This method configures the specified TOptions object as a singleton service. Declaration public static IServiceCollection ConfigureOptions<TOptions>(this IServiceCollection serviceCollection, IConfiguration configuration) where TOptions : class, new() Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection The service collection to use for the operation. IConfiguration configuration The configuration to use for the operation. Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection The value of the serviceCollection parameter, for chaining calls together. Type Parameters Name Description TOptions The type of associated options. Remarks In this method, the options are read from the configuration, bound to an instance of TOptions , verified (if the TOptions type derives from ), and finally registered with serviceCollection as a singleton service. ConfigureOptions<TOptions>(IServiceCollection, IConfiguration, out TOptions) This method configures the specified TOptions object as a singleton service. parameter. Declaration public static IServiceCollection ConfigureOptions<TOptions>(this IServiceCollection serviceCollection, IConfiguration configuration, out TOptions options) where TOptions : class, new() Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection The service collection to use for the operation. IConfiguration configuration The configuration to use for the operation. TOptions options The bound and validated options instance. Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection The value of the serviceCollection parameter, for chaining calls together. Type Parameters Name Description TOptions The type of associated options. Remarks In this method, the options are read from the configuration, bound to an instance of TOptions , verified (if the TOptions type derives from ), and finally registered with serviceCollection as a singleton service, using TOptions as the service type. The unadorned option instance is returned using the options parameter - for scenarios where options need to be configured and then immediately used for other configuration purposes. Examples This example demonstrates configuring options when the values are needed before the host application is created: public static WebApplicationBuilder AddFoo(this WebApplicationBuilder builder) { builder.Services.ConfigureOptions{MyOptions}( builder.Configuration, out var myOptions ); // TODO : use the bound and validated 'myOptions' here. } ConfigureOptions<TOptions, TImplementation>(IServiceCollection, IConfiguration) This method configures the specified TOptions object as a singleton service. Declaration public static IServiceCollection ConfigureOptions<TOptions, TImplementation>(this IServiceCollection serviceCollection, IConfiguration configuration) where TOptions : class where TImplementation : class, TOptions, new() Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection The service collection to use for the operation. IConfiguration configuration The configuration to use for the operation. Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection The value of the serviceCollection parameter, for chaining calls together. Type Parameters Name Description TOptions The type of associated options. TImplementation The type of associated options interface. Remarks In this method, the options are read from the configuration, bound to an instance of TImplementation , verified (if the TImplementation type derives from ), and finally registered with serviceCollection as a singleton service, using TOptions as the service type. ConfigureOptions<TOptions, TImplementation>(IServiceCollection, IConfiguration, out TOptions) This method configures the specified TOptions object as a singleton service. parameter. Declaration public static IServiceCollection ConfigureOptions<TOptions, TImplementation>(this IServiceCollection serviceCollection, IConfiguration configuration, out TOptions options) where TOptions : class where TImplementation : class, TOptions, new() Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection The service collection to use for the operation. IConfiguration configuration The configuration to use for the operation. TOptions options The bound and validated options instance. Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection The value of the serviceCollection parameter, for chaining calls together. Type Parameters Name Description TOptions The type of associated options. TImplementation The type of associated options interface. Remarks In this method, the options are read from the configuration, bound to an instance of TImplementation , verified (if the TImplementation type derives from ), and finally registered with serviceCollection as a singleton service, using TOptions as the service type. The unadorned option instance is returned using the options parameter - for scenarios where options need to be configured and then immediately used for other configuration purposes. Examples This example demonstrates configuring options when the values are needed before the host application is created: public static WebApplicationBuilder AddFoo(this WebApplicationBuilder builder) { builder.Services.ConfigureOptions{IMyOptions, MyOptions}( builder.Configuration, out var myOptions ); // TODO : use the bound and validated 'myOptions' here. } TryConfigureOptions<TOptions>(IServiceCollection, TOptions) This method attempts to configure the specified TOptions object as a singleton service. Declaration public static bool TryConfigureOptions<TOptions>(this IServiceCollection serviceCollection, TOptions options) where TOptions : class, new() Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection The service collection to use for the operation. TOptions options The options to use for the operation. Returns Type Description System.Boolean True if the options were configured; false otherwise. Type Parameters Name Description TOptions The type of associated options. Remarks In this method, the options are verified (if the TOptions type derives from ), and then registered with serviceCollection as a singleton service. TryConfigureOptions<TOptions>(IServiceCollection, IConfiguration) This method attempts to configure the specified TOptions object as a singleton service. Declaration public static bool TryConfigureOptions<TOptions>(this IServiceCollection serviceCollection, IConfiguration configuration) where TOptions : class, new() Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection The service collection to use for the operation. IConfiguration configuration The configuration to use for the operation. Returns Type Description System.Boolean True if the options were configured; false otherwise. Type Parameters Name Description TOptions The type of associated options. Remarks In this method, the options are read from the configuration, bound to an instance of TOptions , verified (if the TOptions type derives from ), and finally registered with serviceCollection as a singleton service. TryConfigureOptions<TOptions>(IServiceCollection, IConfiguration, out TOptions) This method attempts to configure the specified TOptions object as a singleton service. Declaration public static bool TryConfigureOptions<TOptions>(this IServiceCollection serviceCollection, IConfiguration configuration, out TOptions options) where TOptions : class, new() Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection The service collection to use for the operation. IConfiguration configuration The configuration to use for the operation. TOptions options The options that were created by the operation. Returns Type Description System.Boolean True if the options were configured; false otherwise. Type Parameters Name Description TOptions The type of associated options. Remarks In this method, the options are read from the configuration, bound to an instance of TOptions , verified (if the TOptions type derives from ), and finally registered with serviceCollection as a singleton service. The unadorned option instance is returned using the options parameter - for scenarios where options need to be configured and then immediately used for other configuration purposes. TryConfigureOptions<TOptions, TImplementation>(IServiceCollection, TImplementation) This method attempts to configure the specified TOptions object as a singleton service. Declaration public static bool TryConfigureOptions<TOptions, TImplementation>(this IServiceCollection serviceCollection, TImplementation options) where TOptions : class where TImplementation : class, TOptions, new() Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection The service collection to use for the operation. TImplementation options The options to use for the operation. Returns Type Description System.Boolean True if the options were configured; false otherwise. Type Parameters Name Description TOptions The type of associated options. TImplementation The type of associated options interface. Remarks In this method, the options are verified (if the TOptions type derives from ), and then registered with serviceCollection as a singleton service. TryConfigureOptions<TOptions, TImplementation>(IServiceCollection, IConfiguration) This method attempts to configure the specified TOptions object as a singleton service. Declaration public static bool TryConfigureOptions<TOptions, TImplementation>(this IServiceCollection serviceCollection, IConfiguration configuration) where TOptions : class where TImplementation : class, TOptions, new() Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection The service collection to use for the operation. IConfiguration configuration The configuration to use for the operation. Returns Type Description System.Boolean True if the options were configured; false otherwise. Type Parameters Name Description TOptions The type of associated options. TImplementation The type of associated options interface. Remarks In this method, the options are read from the configuration, bound to an instance of TImplementation , verified (if the TImplementation type derives from ), and finally registered with serviceCollection as a singleton service, using TOptions as the service type. TryConfigureOptions<TOptions, TImplementation>(IServiceCollection, IConfiguration, out TImplementation) This method attempts to configure the specified TOptions object as a singleton service. Declaration public static bool TryConfigureOptions<TOptions, TImplementation>(this IServiceCollection serviceCollection, IConfiguration configuration, out TImplementation options) where TOptions : class where TImplementation : class, TOptions, new() Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection The service collection to use for the operation. IConfiguration configuration The configuration to use for the operation. TImplementation options The options that were created by the operation. Returns Type Description System.Boolean True if the options were configured; false otherwise. Type Parameters Name Description TOptions The type of associated options. TImplementation The type of associated options interface. Remarks In this method, the options are read from the configuration, bound to an instance of TImplementation , verified (if the TImplementation type derives from ), and finally registered with serviceCollection as a singleton service, using TOptions as the service type. The unadorned option instance is returned using the options parameter - for scenarios where options need to be configured and then immediately used for other configuration purposes."
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Add your introductions here!",
    "keywords": "Add your introductions here!"
  },
  "index.html": {
    "href": "index.html",
    "title": "Introduction",
    "keywords": "Introduction CG.Options.dll contains extensions for application options that are used by other CodeGator packages."
  }
}